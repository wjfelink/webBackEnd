<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop" xsi:schemaLocation="
http://www.springframework.org/schema/beans 
http://www.springframework.org/schema/beans/spring-beans-3.0.xsd 
http://www.springframework.org/schema/tx 
http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
http://www.springframework.org/schema/aop 
http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
">

	<!-- JNDI方式配置数据源 -->
	<!-- <bean id="dataSource" class="org.springframework.jndi.JndiObjectFactoryBean"> <property name="jndiName" value="${jndiName}"></property> </bean> -->

	<!-- 配置数据源 -->
	<bean name="mysql_dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		<property name="url" value="${jdbc_url}" />
		<property name="username" value="${jdbc_username}" />
		<property name="password" value="${jdbc_password}" />

		<!-- 初始化连接大小 -->
		<property name="initialSize" value="0" />
		<!-- 连接池最大使用连接数量 -->
		<property name="maxActive" value="20" />
		<!-- 连接池最大空闲 -->
		<property name="maxIdle" value="20" />
		<!-- 连接池最小空闲 -->
		<property name="minIdle" value="0" />
		<!-- 获取连接最大等待时间 -->
		<property name="maxWait" value="60000" />

		<!-- <property name="poolPreparedStatements" value="true" /> <property name="maxPoolPreparedStatementPerConnectionSize" value="33" /> -->

		<property name="validationQuery" value="${validationQuery}" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />
		<property name="testWhileIdle" value="true" />

		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="25200000" />

		<!-- 打开removeAbandoned功能 -->
		<property name="removeAbandoned" value="true" />
		<!-- 1800秒，也就是30分钟 -->
		<property name="removeAbandonedTimeout" value="1800" />
		<!-- 关闭abanded连接时输出错误日志 -->
		<property name="logAbandoned" value="true" />

		<!-- 监控数据库 -->
		<!-- <property name="filters" value="stat" /> -->
		<property name="filters" value="mergeStat" />
	</bean>
    <!--数据源配置 c3p0-->
    <!--<bean id="mysql_dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">-->

        <!--<property name="driverClass" value="${driverClassName}"/>-->
        <!--<property name="jdbcUrl" value="${jdbc_url}"/>-->
        <!--<property name="user" value="${jdbc_username}"/>-->
        <!--<property name="password" value="${jdbc_password}"/>-->

        <!--&lt;!&ndash;连接池中保留的最小连接数。&ndash;&gt;-->
        <!--<property name="minPoolSize" value="${db.minPoolSize}"/>-->

        <!--&lt;!&ndash;连接池中保留的最大连接数。Default: 15 &ndash;&gt;-->
        <!--<property name="maxPoolSize" value="${db.maxPoolSize}"/>-->

        <!--&lt;!&ndash;初始化时获取的连接数，取值应在minPoolSize与maxPoolSize之间。Default: 3 &ndash;&gt;-->
        <!--<property name="initialPoolSize" value="${db.initialPoolSize}"/>-->

        <!--&lt;!&ndash;最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 &ndash;&gt;-->
        <!--<property name="maxIdleTime" value="${db.maxIdleTime}"/>-->

        <!--&lt;!&ndash;当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 &ndash;&gt;-->
        <!--<property name="acquireIncrement" value="${db.acquireIncrement}"/>-->

        <!--&lt;!&ndash;JDBC的标准参数，用以控制数据源内加载的PreparedStatements数量。但由于预缓存的statements-->
        <!--属于单个connection而不是整个连接池。所以设置这个参数需要考虑到多方面的因素。-->
       <!--如果maxStatements与maxStatementsPerConnection均为0，则缓存被关闭。Default: 0&ndash;&gt;-->
        <!--<property name="maxStatements" value="${db.maxStatements}"/>-->

        <!--&lt;!&ndash;每60秒检查所有连接池中的空闲连接。Default: 0 &ndash;&gt;-->
        <!--<property name="idleConnectionTestPeriod" value="${db.idleConnectionTestPeriod}"/>-->

        <!--&lt;!&ndash;定义在从数据库获取新连接失败后重复尝试的次数。Default: 30 &ndash;&gt;-->
        <!--<property name="acquireRetryAttempts" value="${db.acquireRetryAttempts}"/>-->

        <!--&lt;!&ndash;获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常。但是数据源仍有效-->
        <!--保留，并在下次调用getConnection()的时候继续尝试获取连接。如果设为true，那么在尝试-->
       <!--获取连接失败后该数据源将申明已断开并永久关闭。Default: false&ndash;&gt;-->
        <!--<property name="breakAfterAcquireFailure" value="${db.breakAfterAcquireFailure}"/>-->

        <!--&lt;!&ndash;因性能消耗大请只在需要的时候使用它。如果设为true那么在每个connection提交的-->
     <!--时候都将校验其有效性。建议使用idleConnectionTestPeriod或automaticTestTable-->
      <!--等方法来提升连接测试的性能。Default: false &ndash;&gt;-->
        <!--<property name="testConnectionOnCheckout" value="${db.testConnectionOnCheckout}"/>-->
    <!--</bean>-->

	<!-- myBatis文件 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="mysql_dataSource" />
		<!-- 自动扫描entity目录, 省掉Configuration.xml里的手工配置 -->
		<property name="mapperLocations" value="classpath:mapping/*.xml" />
        <!--<property name="mapperLocations">-->
            <!--<list>-->
                <!--<value>classpath:/cn.ctyun.standdemo/mapping/UserMapper.xml</value>-->
            <!--</list>-->
        <!--</property>-->
	</bean>

    <!--根据mapper.xml文件生成mapper对象,并注入到spring容器中-->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="cn.ctyun.standdemo.dao" />
        <property name="annotationClass" value="cn.ctyun.core.base.dao.annotation.MybatisMapper"/>
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
	</bean>

    <!--对mybatis注解的映射-->
    <bean class="cn.ctyun.core.base.dao.configuration.MybatisDefinitionConfigurator">
        <property name="basePackage" value="cn.ctyun" />
    </bean>
    <bean class="cn.ctyun.core.base.dao.configuration.MybatisMapperProxy"/>

    <!-- log4jdbc可以将数据源执行的sql将占位符?替换成字符,并以日志打印出来. log4j配置: log4j.logger.jdbc.sqltiming=INFO
   详情请看: http://code.google.com/p/rapid-framework/wiki/log4jdbc
   如oracle示例:
       原来的sql: select * from user where birth_date = ? and username = ? and age > ?
       转换后sql: select * from user where birth_date = to_date('2010-08-13','yyyy-mm-dd') and username = 'badqiu' and age > 20
       -->
    <bean id="log4jdbcInterceptor" class="net.sf.log4jdbc.DataSourceSpyInterceptor"/>
    <bean id="dataSourceLog4jdbcAutoProxyCreator"
          class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator">
        <property name="interceptorNames">
            <list>
                <value>log4jdbcInterceptor</value>
            </list>
        </property>
        <property name="beanNames">
            <list>
                <value>mysql_dataSource</value>
            </list>
        </property>
    </bean>

	<!-- 配置事务管理器 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="mysql_dataSource" />
	</bean>

	<!-- 注解方式配置事务，用于开启对注解事务管理的支持 -->
	 <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/>

	<!-- 拦截器方式配置事务 -->
	<tx:advice id="transactionAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="add*" propagation="REQUIRED" isolation="READ_COMMITTED" />
			<tx:method name="append*" propagation="REQUIRED" />
			<tx:method name="insert*" propagation="REQUIRED" />
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="modify*" propagation="REQUIRED" />
			<tx:method name="edit*" propagation="REQUIRED" />
			<tx:method name="delete*" propagation="REQUIRED" />
			<tx:method name="remove*" propagation="REQUIRED" />
			<tx:method name="repair" propagation="REQUIRED" />
			<tx:method name="delAndRepair" propagation="REQUIRED" />

			<tx:method name="get*" propagation="SUPPORTS" />
			<tx:method name="find*" propagation="SUPPORTS" />
			<tx:method name="load*" propagation="SUPPORTS" />
			<tx:method name="search*" propagation="SUPPORTS" />
			<tx:method name="datagrid*" propagation="SUPPORTS" />

			<tx:method name="*" propagation="SUPPORTS" />
		</tx:attributes>
	</tx:advice>
	<aop:config>
		<aop:pointcut id="transactionPointcut" expression="execution(* cn.ctyun.standdemo.service..*Impl.*(..))" />
		<aop:advisor pointcut-ref="transactionPointcut" advice-ref="transactionAdvice" />
	</aop:config>


	<!--&lt;!&ndash; 配置druid监控spring jdbc &ndash;&gt;-->
	<!--<bean id="druid-stat-interceptor" class="com.alibaba.druid.support.spring.stat.DruidStatInterceptor">-->
	<!--</bean>-->
	<!--<bean id="druid-stat-pointcut" class="org.springframework.aop.support.JdkRegexpMethodPointcut" scope="prototype">-->
		<!--<property name="patterns">-->
			<!--<list>-->
				<!--<value>cn.ctyun.standdemo.service.*</value>-->
			<!--</list>-->
		<!--</property>-->
	<!--</bean>-->
	<!--<aop:config>-->
		<!--<aop:advisor advice-ref="druid-stat-interceptor" pointcut-ref="druid-stat-pointcut" />-->
	<!--</aop:config>-->

</beans>